from typing import List, Union, Literal, Optional, Dict, Any
from pydantic import BaseModel, Field, ConfigDict


class ContentPart(BaseModel):
    type: Literal["text", "image_url"]
    text: Optional[str] = Field(None, description="The text content.")
    image_url: Optional[Dict[str, str]] = Field(
        None, description="Image URL object with 'url' and optional 'detail' fields."
    )


class Message(BaseModel):
    role: Literal["system", "user", "assistant", "tool"]
    content: Optional[Union[str, List[ContentPart]]] = Field(
        None, description="The contents of the message."
    )
    name: Optional[str] = Field(
        None, description="An optional name for the participant."
    )


class FunctionCall(BaseModel):
    name: str = Field(..., description="The name of the function to call.")
    arguments: str = Field(
        ..., description="The arguments to call the function with, as JSON string."
    )


class ToolCall(BaseModel):
    id: str = Field(..., description="The ID of the tool call.")
    type: Literal["function"] = Field(
        ..., description="The type of the tool. Currently, only function is supported."
    )
    function: FunctionCall = Field(
        ..., description="The function that the model called."
    )


class AssistantMessage(Message):
    role: Literal["assistant"] = "assistant"
    weight: Optional[int] = Field(
        None,
        description="Controls whether the assistant message is trained against (0 or 1)",
    )
    refusal: Optional[str] = Field(
        None, description="The refusal message by the assistant."
    )
    tool_calls: Optional[List[ToolCall]] = Field(
        None, description="The tool calls generated by the model."
    )
    function_call: Optional[Dict[str, Any]] = Field(
        None, description="Deprecated. The name and arguments of a function to call."
    )


class ToolMessage(Message):
    role: Literal["tool"] = "tool"
    tool_call_id: str = Field(
        ..., description="Tool call that this message is responding to."
    )


class FunctionParameters(BaseModel):
    type: str
    properties: Dict[str, Any]
    required: Optional[List[str]] = None


class FunctionDefinition(BaseModel):
    name: str = Field(..., description="The name of the function to be called.")
    description: Optional[str] = Field(
        None, description="A description of what the function does."
    )
    parameters: FunctionParameters = Field(
        ..., description="The parameters the function accepts."
    )


class Tool(BaseModel):
    type: Literal["function"] = Field(
        ..., description="The type of the tool. Currently, only function is supported."
    )
    function: FunctionDefinition = Field(..., description="The function definition.")
    strict: Optional[bool] = Field(
        None, description="Whether to enable strict schema adherence."
    )


class ChatModelTrainingFormat(BaseModel):
    messages: List[Union[Message, AssistantMessage, ToolMessage]] = Field(
        ..., description="The list of messages in the conversation."
    )
    parallel_tool_calls: Optional[bool] = Field(
        False,
        description="Whether to enable parallel function calling during tool use.",
    )
    tools: Optional[List[Tool]] = Field(
        None, description="A list of tools the model may generate JSON inputs for."
    )
    functions: Optional[List[FunctionDefinition]] = Field(
        None,
        description="Deprecated. A list of functions the model may generate JSON inputs for.",
    )

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "messages": [
                    {
                        "role": "user",
                        "content": "What is the weather in San Francisco?",
                    },
                    {
                        "role": "assistant",
                        "tool_calls": [
                            {
                                "id": "call_id",
                                "type": "function",
                                "function": {
                                    "name": "get_current_weather",
                                    "arguments": '{"location": "San Francisco, USA", "format": "celsius"}',
                                },
                            }
                        ],
                    },
                ],
                "parallel_tool_calls": False,
                "tools": [
                    {
                        "type": "function",
                        "function": {
                            "name": "get_current_weather",
                            "description": "Get the current weather",
                            "parameters": {
                                "type": "object",
                                "properties": {
                                    "location": {
                                        "type": "string",
                                        "description": "The city and country, eg. San Francisco, USA",
                                    },
                                    "format": {
                                        "type": "string",
                                        "enum": ["celsius", "fahrenheit"],
                                    },
                                },
                                "required": ["location", "format"],
                            },
                        },
                    }
                ],
            }
        }
    )
